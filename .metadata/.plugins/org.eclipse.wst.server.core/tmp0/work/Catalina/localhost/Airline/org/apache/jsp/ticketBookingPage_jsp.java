/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2024-05-16 15:01:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import modelClass.Login;

public final class ticketBookingPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("modelClass.Login");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("\n");
      out.write("<title>Flight Ticket Booking</title>\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("	href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	");
 
Login login = (Login) session.getAttribute("userEmail");
String source = request.getParameter("source");
String destination = request.getParameter("destination");
String amount = request.getParameter("amount");
String time = request.getParameter("time");
String flightNumber = request.getParameter("flightNumber");
String flightName = request.getParameter("flightName");


      out.write("\n");
      out.write("	<div class=\"container\">\n");
      out.write("		<h2 class=\"mt-4 mb-4\">Flight Ticket Booking</h2>\n");
      out.write("		<form action=\"TicketBookingServlet\" method=\"post\" id=\"bookingForm\">\n");
      out.write("			<div class=\"form-row\">\n");
      out.write("				<div class=\"form-group col-md-6\">\n");
      out.write("					<label for=\"fullName\">Full Name:</label> <input type=\"text\"\n");
      out.write("						class=\"form-control\" id=\"fullName\" name=\"fullName\" required>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"form-group col-md-6\">\n");
      out.write("					<label for=\"animal\">Your Favourit animal:</label> <input type=\"text\"\n");
      out.write("						class=\"form-control\" id=\"animal\" name=\"animal\" required>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("			</div>\n");
      out.write("			<div class=\"form-row\">\n");
      out.write("				<div class=\"form-group col-md-6\">\n");
      out.write("					<label for=\"phone\">Phone Number:</label> <input type=\"tel\"\n");
      out.write("						class=\"form-control\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{10}\"\n");
      out.write("						required>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"form-group col-md-6\">\n");
      out.write("					<label for=\"panCard\">PAN Card Number:</label> <input type=\"text\"\n");
      out.write("						class=\"form-control\" id=\"panCard\" name=\"panCard\" required>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("			<div class=\"form-row\">\n");
      out.write("				<div class=\"form-group col-md-6\">\n");
      out.write("					<label for=\"aadhaar\">Aadhaar Number:</label> <input type=\"tel\"\n");
      out.write("						class=\"form-control\" id=\"aadhaar\" name=\"aadhaar\"\n");
      out.write("						pattern=\"[0-9]{12}\" required>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"form-group col-md-6\">\n");
      out.write("					<label for=\"passport\">Passport Number:</label> <input type=\"number\"\n");
      out.write("						class=\"form-control\" id=\"passport\" name=\"passport\" required>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("			</div>\n");
      out.write("			<div class=\"form-row\">\n");
      out.write("				<label for=\"email\"></label> <input type=\"hidden\"\n");
      out.write("					class=\"form-control\" id=\"email\" name=\"email\"\n");
      out.write("					value=\"");
      out.print(login.getEmail() );
      out.write("\" required> <input\n");
      out.write("					type=\"hidden\" class=\"form-control\" id=\"destination\"\n");
      out.write("					name=\"destination\" value=\"");
      out.print(destination );
      out.write("\" required> <input\n");
      out.write("					type=\"hidden\" class=\"form-control\" id=\"source\" name=\"source\"\n");
      out.write("					value=\"");
      out.print(source );
      out.write("\" required> <input type=\"hidden\"\n");
      out.write("					class=\"form-control\" id=\"amount\" name=\"amount\" value=\"");
      out.print(amount );
      out.write("\"\n");
      out.write("					required> <input type=\"hidden\" class=\"form-control\"\n");
      out.write("					id=\"time\" name=\"time\" value=\"");
      out.print(time );
      out.write("\" required> <input\n");
      out.write("					type=\"hidden\" class=\"form-control\" id=\"flightNumber\"\n");
      out.write("					name=\"flightNumber\" value=\"");
      out.print(flightNumber );
      out.write("\" required> <input\n");
      out.write("					type=\"hidden\" class=\"form-control\" id=\"flightName\"\n");
      out.write("					name=\"flightName\" value=\"");
      out.print(flightName );
      out.write("\" required> <input\n");
      out.write("					type=\"hidden\" class=\"form-control\" id=\"source\" name=\"source\"\n");
      out.write("					value=\"");
      out.print(source );
      out.write("\" required>\n");
      out.write("\n");
      out.write("			</div>\n");
      out.write("			<button type=\"submit\" class=\"btn btn-primary\">Book Ticket</button>\n");
      out.write("		</form>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("	<script>\n");
      out.write("		document.addEventListener(\"DOMContentLoaded\", function() {\n");
      out.write("			// Get all input fields that require dynamic validation\n");
      out.write("			const inputFields = document.querySelectorAll('.form-control');\n");
      out.write("\n");
      out.write("			// Add event listener for input event to each input field\n");
      out.write("			inputFields.forEach(function(inputField) {\n");
      out.write("				inputField.addEventListener('input', function(event) {\n");
      out.write("					// Check if the input field is valid\n");
      out.write("					if (inputField.validity.valid) {\n");
      out.write("						// Add the 'is-valid' class\n");
      out.write("						inputField.classList.add('is-valid');\n");
      out.write("						// Remove the 'is-invalid' class if present\n");
      out.write("						inputField.classList.remove('is-invalid');\n");
      out.write("					} else {\n");
      out.write("						// Add the 'is-invalid' class\n");
      out.write("						inputField.classList.add('is-invalid');\n");
      out.write("						// Remove the 'is-valid' class if present\n");
      out.write("						inputField.classList.remove('is-valid');\n");
      out.write("					}\n");
      out.write("				});\n");
      out.write("			});\n");
      out.write("\n");
      out.write("			// Add event listener for form submission\n");
      out.write("			document.querySelector('form').addEventListener('submit',\n");
      out.write("					function(event) {\n");
      out.write("						// Prevent form submission if any input field is invalid\n");
      out.write("						if (!this.checkValidity()) {\n");
      out.write("							event.preventDefault();\n");
      out.write("							event.stopPropagation();\n");
      out.write("						}\n");
      out.write("\n");
      out.write("						// Add 'was-validated' class to show validation styles\n");
      out.write("						this.classList.add('was-validated');\n");
      out.write("					});\n");
      out.write("		});\n");
      out.write("	</script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
